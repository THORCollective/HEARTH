#!/usr/bin/env python3
"""
Comprehensive test runner for HEARTH scripts.
"""

import unittest
import sys
import tempfile
import json
from pathlib import Path
from unittest.mock import Mock, patch, MagicMock
from typing import List, Dict, Any

# Add scripts directory to path for imports
sys.path.insert(0, str(Path(__file__).parent))

from logger_config import get_logger
from config_manager import ConfigManager, HearthConfig
from validators import HuntValidator
from hunt_parser_utils import (
    find_hunt_files, find_table_header_line, extract_table_cells,
    clean_markdown_formatting, extract_submitter_info, parse_tag_list
)
from hunt_parser import HuntData, HuntFileReader, HuntProcessor
from cache_manager import CacheManager, cached
from exceptions import ValidationError, FileProcessingError, MarkdownParsingError

logger = get_logger()


class TestHuntValidator(unittest.TestCase):
    """Test cases for HuntValidator."""
    
    def setUp(self):
        self.validator = HuntValidator()
    
    def test_validate_hunt_id_valid(self):
        """Test valid hunt ID validation."""
        self.assertTrue(self.validator.validate_hunt_id('H001', 'Flames'))\n        self.assertTrue(self.validator.validate_hunt_id('B123', 'Embers'))\n        self.assertTrue(self.validator.validate_hunt_id('M999', 'Alchemy'))\n    \n    def test_validate_hunt_id_invalid(self):\n        \"\"\"Test invalid hunt ID validation.\"\"\"\n        with self.assertRaises(ValidationError):\n            self.validator.validate_hunt_id('X001', 'Flames')\n        \n        with self.assertRaises(ValidationError):\n            self.validator.validate_hunt_id('H1', 'Flames')\n        \n        with self.assertRaises(ValidationError):\n            self.validator.validate_hunt_id('', 'Flames')\n    \n    def test_validate_tactics(self):\n        \"\"\"Test tactics validation.\"\"\"\n        # Valid tactics\n        result = self.validator.validate_tactics('Initial Access, Execution')\n        self.assertIn('Initial Access', result)\n        self.assertIn('Execution', result)\n        \n        # List input\n        result = self.validator.validate_tactics(['Persistence', 'Defense Evasion'])\n        self.assertEqual(len(result), 2)\n        \n        # Invalid tactics should be filtered out (logged as warning)\n        result = self.validator.validate_tactics('Invalid Tactic, Execution')\n        self.assertIn('Execution', result)\n        self.assertNotIn('Invalid Tactic', result)\n    \n    def test_validate_tags(self):\n        \"\"\"Test tags validation.\"\"\"\n        result = self.validator.validate_tags('#tag1 #tag2 tag3')\n        expected = ['tag1', 'tag2', 'tag3']\n        self.assertEqual(result, expected)\n        \n        # Test normalization\n        result = self.validator.validate_tags('#TAG1 #Tag-2')\n        self.assertIn('tag1', result)\n        self.assertIn('tag-2', result)\n    \n    def test_validate_url(self):\n        \"\"\"Test URL validation.\"\"\"\n        self.assertTrue(self.validator.validate_url('https://example.com'))\n        self.assertTrue(self.validator.validate_url('http://github.com/user/repo'))\n        \n        with self.assertRaises(ValidationError):\n            self.validator.validate_url('not-a-url')\n        \n        with self.assertRaises(ValidationError):\n            self.validator.validate_url('ftp://example.com')\n\n\nclass TestHuntParserUtils(unittest.TestCase):\n    \"\"\"Test cases for hunt parser utilities.\"\"\"\n    \n    def test_clean_markdown_formatting(self):\n        \"\"\"Test markdown formatting cleanup.\"\"\"\n        self.assertEqual(clean_markdown_formatting('**bold**'), 'bold')\n        self.assertEqual(clean_markdown_formatting('*italic*'), 'italic')\n        self.assertEqual(clean_markdown_formatting('  text  '), 'text')\n    \n    def test_extract_submitter_info(self):\n        \"\"\"Test submitter information extraction.\"\"\"\n        # Markdown link format\n        result = extract_submitter_info('[John Doe](https://example.com)')\n        self.assertEqual(result['name'], 'John Doe')\n        self.assertEqual(result['link'], 'https://example.com')\n        \n        # Plain text\n        result = extract_submitter_info('Jane Smith')\n        self.assertEqual(result['name'], 'Jane Smith')\n        self.assertEqual(result['link'], '')\n        \n        # Empty input\n        result = extract_submitter_info('')\n        self.assertEqual(result['name'], '')\n        self.assertEqual(result['link'], '')\n    \n    def test_parse_tag_list(self):\n        \"\"\"Test tag list parsing.\"\"\"\n        result = parse_tag_list('#tag1 #tag2 #tag3')\n        expected = ['tag1', 'tag2', 'tag3']\n        self.assertEqual(result, expected)\n        \n        # Mixed format\n        result = parse_tag_list('#tag1 tag2 #tag3')\n        self.assertEqual(result, ['tag1', 'tag3'])  # Only hashtag prefixed\n    \n    def test_find_table_header_line(self):\n        \"\"\"Test table header detection.\"\"\"\n        content_lines = [\n            '# Hunt Title',\n            '',\n            '| Hunt # | Idea | Tactic | Notes | Tags | Submitter |',\n            '|--------|------|--------|-------|------|-----------|',\n            '| H001 | Test | Execution | Test notes | #test | John Doe |'\n        ]\n        \n        result = find_table_header_line(content_lines)\n        self.assertEqual(result, 2)\n        \n        # No table header\n        result = find_table_header_line(['No table here'])\n        self.assertIsNone(result)\n        \n        # Empty input\n        with self.assertRaises(ValidationError):\n            find_table_header_line([])\n\n\nclass TestHuntData(unittest.TestCase):\n    \"\"\"Test cases for HuntData class.\"\"\"\n    \n    def setUp(self):\n        self.sample_hunt_data = {\n            'id': 'H001',\n            'category': 'Flames',\n            'title': 'Test Hunt',\n            'tactic': 'Execution',\n            'notes': 'Test notes',\n            'tags': ['test', 'example'],\n            'submitter': {'name': 'John Doe', 'link': 'https://example.com'},\n            'why': 'Test reasoning',\n            'references': 'Test references',\n            'file_path': 'Flames/H001.md'\n        }\n    \n    def test_hunt_data_creation(self):\n        \"\"\"Test HuntData object creation.\"\"\"\n        hunt = HuntData(**self.sample_hunt_data)\n        self.assertEqual(hunt.id, 'H001')\n        self.assertEqual(hunt.category, 'Flames')\n        self.assertEqual(len(hunt.tags), 2)\n    \n    def test_hunt_data_to_dict(self):\n        \"\"\"Test conversion to dictionary.\"\"\"\n        hunt = HuntData(**self.sample_hunt_data)\n        result = hunt.to_dict()\n        \n        self.assertIsInstance(result, dict)\n        self.assertEqual(result['id'], 'H001')\n        self.assertEqual(result['tags'], ['test', 'example'])\n\n\nclass TestCacheManager(unittest.TestCase):\n    \"\"\"Test cases for CacheManager.\"\"\"\n    \n    def setUp(self):\n        # Use temporary directory for testing\n        self.temp_dir = tempfile.mkdtemp()\n        self.cache_manager = CacheManager(self.temp_dir, default_ttl=60)\n    \n    def tearDown(self):\n        # Clean up\n        self.cache_manager.clear_all()\n    \n    def test_cache_set_get(self):\n        \"\"\"Test basic cache set and get operations.\"\"\"\n        key = 'test_key'\n        data = {'test': 'data'}\n        \n        # Set data\n        self.cache_manager.set(key, data)\n        \n        # Get data\n        result = self.cache_manager.get(key)\n        self.assertEqual(result, data)\n    \n    def test_cache_expiration(self):\n        \"\"\"Test cache expiration.\"\"\"\n        key = 'test_key'\n        data = 'test_data'\n        \n        # Set with very short TTL\n        self.cache_manager.set(key, data)\n        \n        # Should be None after expiration\n        result = self.cache_manager.get(key, ttl=0)  # Immediate expiration\n        self.assertIsNone(result)\n    \n    def test_cache_clear(self):\n        \"\"\"Test cache clearing.\"\"\"\n        self.cache_manager.set('key1', 'data1')\n        self.cache_manager.set('key2', 'data2')\n        \n        self.cache_manager.clear_all()\n        \n        self.assertIsNone(self.cache_manager.get('key1'))\n        self.assertIsNone(self.cache_manager.get('key2'))\n    \n    def test_cached_decorator(self):\n        \"\"\"Test the @cached decorator.\"\"\"\n        call_count = 0\n        \n        @cached(ttl=60)\n        def expensive_function(x):\n            nonlocal call_count\n            call_count += 1\n            return x * 2\n        \n        # First call\n        result1 = expensive_function(5)\n        self.assertEqual(result1, 10)\n        self.assertEqual(call_count, 1)\n        \n        # Second call (should use cache)\n        result2 = expensive_function(5)\n        self.assertEqual(result2, 10)\n        self.assertEqual(call_count, 1)  # Not incremented\n\n\nclass TestConfigManager(unittest.TestCase):\n    \"\"\"Test cases for ConfigManager.\"\"\"\n    \n    def test_default_config(self):\n        \"\"\"Test default configuration loading.\"\"\"\n        config_manager = ConfigManager()\n        config = config_manager.config\n        \n        self.assertIsInstance(config, HearthConfig)\n        self.assertEqual(config.base_directory, '.')\n        self.assertIn('Flames', config.hunt_directories)\n    \n    def test_config_update(self):\n        \"\"\"Test configuration updates.\"\"\"\n        config_manager = ConfigManager()\n        \n        config_manager.update_config(base_directory='/test')\n        self.assertEqual(config_manager.config.base_directory, '/test')\n\n\nclass TestIntegration(unittest.TestCase):\n    \"\"\"Integration tests for the complete system.\"\"\"\n    \n    def setUp(self):\n        # Create temporary test files\n        self.temp_dir = Path(tempfile.mkdtemp())\n        self.create_test_hunt_files()\n    \n    def tearDown(self):\n        # Clean up temporary files\n        import shutil\n        shutil.rmtree(self.temp_dir, ignore_errors=True)\n    \n    def create_test_hunt_files(self):\n        \"\"\"Create test hunt files for integration testing.\"\"\"\n        # Create directory structure\n        flames_dir = self.temp_dir / 'Flames'\n        flames_dir.mkdir()\n        \n        # Create test hunt file\n        hunt_content = \"\"\"\n# Test Hunt\n\n| Hunt # | Idea / Hypothesis | Tactic | Notes | Tags | Submitter |\n|--------|-------------------|--------|-------|------|-----------|\n| H001 | Test hypothesis | Execution | Test notes | #test #example | [John Doe](https://example.com) |\n\n## Why\n\nThis is test reasoning.\n\n## References\n\n- https://example.com/reference\n\"\"\"\n        \n        hunt_file = flames_dir / 'H001.md'\n        hunt_file.write_text(hunt_content)\n    \n    @patch('scripts.hunt_parser_utils.config')\n    def test_full_processing_pipeline(self, mock_config):\n        \"\"\"Test the complete hunt processing pipeline.\"\"\"\n        # Mock configuration\n        mock_config.base_directory = str(self.temp_dir)\n        mock_config.hunt_directories = ('Flames',)\n        mock_config.hunt_file_pattern = '*.md'\n        mock_config.excluded_files = ('secret.md',)\n        \n        # Test file discovery\n        hunt_files = find_hunt_files(str(self.temp_dir))\n        self.assertEqual(len(hunt_files), 1)\n        self.assertEqual(hunt_files[0].name, 'H001.md')\n        \n        # Test hunt processing\n        processor = HuntProcessor()\n        reader = HuntFileReader()\n        \n        hunt_data = reader.parse_hunt_file(hunt_files[0], 'Flames')\n        self.assertIsNotNone(hunt_data)\n        self.assertEqual(hunt_data.id, 'H001')\n        self.assertEqual(hunt_data.title, 'Test hypothesis')\n        self.assertEqual(hunt_data.submitter['name'], 'John Doe')\n\n\ndef run_all_tests():\n    \"\"\"Run all test suites.\"\"\"\n    test_suites = [\n        TestHuntValidator,\n        TestHuntParserUtils,\n        TestHuntData,\n        TestCacheManager,\n        TestConfigManager,\n        TestIntegration\n    ]\n    \n    runner = unittest.TextTestRunner(verbosity=2)\n    all_passed = True\n    \n    for test_suite in test_suites:\n        print(f\"\\n{'='*60}\")\n        print(f\"Running {test_suite.__name__}\")\n        print('='*60)\n        \n        suite = unittest.TestLoader().loadTestsFromTestCase(test_suite)\n        result = runner.run(suite)\n        \n        if not result.wasSuccessful():\n            all_passed = False\n    \n    print(f\"\\n{'='*60}\")\n    if all_passed:\n        print(\"✅ ALL TESTS PASSED\")\n        return 0\n    else:\n        print(\"❌ SOME TESTS FAILED\")\n        return 1\n\n\nif __name__ == '__main__':\n    sys.exit(run_all_tests())