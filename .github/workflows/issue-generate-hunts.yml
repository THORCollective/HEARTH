name: "Draft or Regenerate Hunt from Issue"

on:
  issues:
    types: [labeled]

jobs:
  generate_draft:
    if: github.event.label.name == 'intel-submission' || github.event.label.name == 'regenerate'
    runs-on: ubuntu-latest
    permissions:
      contents: write
      issues: write
      pull-requests: write
    steps:
      - name: "Checkout Repo"
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch all history for all branches and tags

      - name: "Check Regeneration Count"
        id: check_regen
        if: github.event.label.name == 'regenerate'
        uses: actions/github-script@v6
        with:
          github-token: ${{secrets.HEARTH_TOKEN}}
          script: |
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            const regenComment = comments.reverse().find(comment => 
              comment.user.login === 'github-actions[bot]' && /Attempt \d+\/5/.test(comment.body)
            );
            let attempt = 0;
            if (regenComment) {
              const match = regenComment.body.match(/Attempt (\d+)\/5/);
              if (match) {
                attempt = parseInt(match[1], 10);
              }
            }
            console.log(`Current attempt: ${attempt}`);
            core.setOutput('attempt_count', attempt);
      
      - name: "Halt if Max Regenerations Reached"
        if: steps.check_regen.outputs.attempt_count >= 5
        uses: peter-evans/create-or-update-comment@v4
        with:
          token: ${{ secrets.HEARTH_TOKEN }}
          issue-number: ${{ github.event.issue.number }}
          body: |
            ⚠️ **Maximum Regeneration Limit Reached (5/5)**
            This hunt has been regenerated the maximum number of times. Please review the current draft or close this issue and start a new submission with different CTI.
      
      - name: "Fail workflow if max reached"
        if: steps.check_regen.outputs.attempt_count >= 5
        run: exit 1
      
      - name: "Set next attempt number"
        id: next_attempt
        run: echo "attempt_number=$((${{ steps.check_regen.outputs.attempt_count || 0 }} + 1))" >> $GITHUB_OUTPUT
      
      - name: "Setup Git Branch"
        run: |
          if [ "${{ github.event.label.name }}" == "regenerate" ]; then
            git checkout draft/issue-${{ github.event.issue.number }}
          else
            git checkout -b draft/issue-${{ github.event.issue.number }}
          fi
      
      - name: "Find existing hunt file if regenerating"
        id: find_hunt
        if: github.event.label.name == 'regenerate'
        run: |
          HUNT_FILE=$(ls Flames/H-*.md | head -n 1)
          echo "hunt_file_path=$HUNT_FILE" >> $GITHUB_OUTPUT

      - name: "Parse Issue Body"
        id: parse_issue
        run: |
          body="${{ github.event.issue.body }}"
          file_url=$(echo "$body" | sed -n 's/.*(\(https:\/\/github.com\/.*\/files\/[0-9]*\/.*\)).*/\1/p' | head -n 1)
          # Parse the source URL from the issue body - it could be in different formats
          source_url=""
          # Try to find URL after "Link to Original Source" label
          source_url=$(echo "$body" | grep -A 1 "Link to Original Source" | tail -n 1 | xargs)
          # If that didn't work, try to find any URL in the body
          if [ -z "$source_url" ] || [ "$source_url" = "Link to Original Source" ]; then
            source_url=$(echo "$body" | grep -o 'https://[^[:space:]]*' | head -n 1)
          fi
          raw_cti=""
          if [ -z "$file_url" ]; then
            raw_cti=$(echo "$body" | awk '/### CTI Content/,/### Link to Original Source/' | sed '1d;$d')
          fi
          echo "file_url=$file_url" >> $GITHUB_OUTPUT
          echo "source_url=$source_url" >> $GITHUB_OUTPUT
          echo "raw_cti<<EOF" >> $GITHUB_OUTPUT
          echo "$raw_cti" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: "Prepare CTI file"
        id: prepare_cti
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          mkdir -p .hearth/intel-drops
          
          file_url="${{ steps.parse_issue.outputs.file_url }}"
          raw_cti="${{ steps.parse_issue.outputs.raw_cti }}"

          if [ -n "$file_url" ]; then
            echo "Downloading CTI file from URL..."
            # Preserve the original filename from the URL
            filename=$(basename "$file_url")
            curl -s -L -H "Authorization: Bearer $GH_TOKEN" -H "Accept: application/octet-stream" "$file_url" -o ".hearth/intel-drops/$filename"
          elif [ -n "$raw_cti" ]; then
            echo "Using raw CTI text from issue body..."
            echo "$raw_cti" > ".hearth/intel-drops/source_cti.txt"
          else
            echo "No CTI content found."
            exit 1
          fi

      - name: "Set up Python 3"
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: "Install dependencies"
        run: |
          python -m pip install --upgrade pip
          pip install openai python-dotenv PyPDF2

      - name: "Run HEARTH draft generator"
        id: generate_draft_file
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          CTI_SOURCE_URL: ${{ steps.parse_issue.outputs.source_url }}
          EXISTING_HUNT_FILE: ${{ steps.find_hunt.outputs.hunt_file_path }}
        run: python scripts/generate_from_cti.py

      - name: "Commit and push generated hunt"
        run: |
          git config --global user.name 'hearthbot'
          git config --global user.email 'hearthbot@users.noreply.github.com'
          git add Flames/*.md
          git commit -m "feat(draft): Update hunt from issue #${{ github.event.issue.number }}"
          git remote set-url origin https://x-access-token:${{ secrets.HEARTH_TOKEN }}@github.com/${{ github.repository }}
          # Use --set-upstream for the initial push, and a simple push for subsequent regenerations.
          if [ "${{ github.event.label.name }}" == "regenerate" ]; then
            git push
          else
            git push --set-upstream origin draft/issue-${{ github.event.issue.number }}
          fi

      - name: "Comment on issue with draft link"
        uses: peter-evans/create-or-update-comment@v4
        with:
          token: ${{ secrets.HEARTH_TOKEN }}
          issue-number: ${{ github.event.issue.number }}
          body: |
            ${{ github.event.label.name == 'regenerate' && format('♻️ A new version of the hunt has been drafted! (Attempt {0}/5)', steps.next_attempt.outputs.attempt_number) || '✅ A new hunt has been drafted from your submission.' }}
            
            Please review the updated file here:
            [**View Hunt Draft**](https://github.com/${{ github.repository }}/blob/draft/issue-${{ github.event.issue.number }}/${{ steps.generate_draft_file.outputs.generated_file_path }})
            
            If it looks good, add the `approved` label. To try again, add the `regenerate` label.

      - name: "Remove 'regenerate' label"
        if: github.event.label.name == 'regenerate'
        uses: actions/github-script@v6
        with:
          github-token: ${{secrets.HEARTH_TOKEN}}
          script: |
            github.rest.issues.removeLabel({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              name: 'regenerate'
            }) 