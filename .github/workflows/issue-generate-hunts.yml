name: "Issue-Driven HEARTH Draft Generation"

on:
  issues:
    types: [labeled]

jobs:
  generate_draft:
    if: github.event.label.name == 'intel-submission'
    runs-on: ubuntu-latest
    permissions:
      contents: write
      issues: write
    steps:
      - name: "Checkout Repo"
        uses: actions/checkout@v4

      - name: "Parse Issue Body"
        id: parse_issue
        run: |
          body="${{ github.event.issue.body }}"
          
          # Extract file URL from markdown link like [text](URL)
          file_url=$(echo "$body" | sed -n 's/.*(\(https:\/\/github.com\/.*\/files\/[0-9]*\/.*\)).*/\1/p' | head -n 1)
          
          # Extract source URL from under the specific markdown heading
          source_url=$(echo "$body" | awk -v RS='### Link to Original Source' 'END{print}' | xargs)

          # Extract raw CTI text if no file is attached
          raw_cti=""
          if [ -z "$file_url" ]; then
            raw_cti=$(echo "$body" | awk '/### CTI Content/,/### Link to Original Source/' | sed '1d;$d')
          fi

          echo "file_url=$file_url" >> $GITHUB_OUTPUT
          echo "source_url=$source_url" >> $GITHUB_OUTPUT
          echo "raw_cti<<EOF" >> $GITHUB_OUTPUT
          echo "$raw_cti" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: "Prepare CTI file"
        id: prepare_cti
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          mkdir -p .hearth/intel-drops
          
          file_url="${{ steps.parse_issue.outputs.file_url }}"
          raw_cti="${{ steps.parse_issue.outputs.raw_cti }}"

          if [ -n "$file_url" ]; then
            echo "Downloading CTI file from URL..."
            # Preserve the original filename from the URL
            filename=$(basename "$file_url")
            curl -s -L -H "Authorization: Bearer $GH_TOKEN" -H "Accept: application/octet-stream" "$file_url" -o ".hearth/intel-drops/$filename"
          elif [ -n "$raw_cti" ]; then
            echo "Using raw CTI text from issue body..."
            echo "$raw_cti" > ".hearth/intel-drops/source_cti.txt"
          else
            echo "No CTI content found."
            exit 1
          fi

      - name: "Set up Python 3"
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: "Install dependencies"
        run: |
          python -m pip install --upgrade pip
          pip install openai python-dotenv PyPDF2

      - name: "Run HEARTH draft generator"
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          CTI_SOURCE_URL: ${{ steps.parse_issue.outputs.source_url }}
        run: python scripts/generate_from_cti.py

      - name: "Comment on issue pending approval"
        uses: peter-evans/create-or-update-comment@v4
        with:
          issue-number: ${{ github.event.issue.number }}
          body: |
            ✅ A new hunt has been drafted from your submission.
            ⏳ It is now waiting for review and approval before a pull request is created.

      - name: "Upload hunt artifacts"
        uses: actions/upload-artifact@v4
        with:
          name: hunt-draft-issue-${{ github.event.issue.number }}
          path: |
            Flames/
            .hearth/processed-intel-drops/

  create_pr:
    needs: generate_draft
    environment: pr-approval
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      issues: write
    steps:
      - name: "Checkout Repo"
        uses: actions/checkout@v4
      
      - name: "Download hunt artifacts"
        uses: actions/download-artifact@v4
        with:
          name: hunt-draft-issue-${{ github.event.issue.number }}
          path: .
      
      - name: "Parse Issue Body for PR" # Re-parse to get URLs and author
        id: parse_issue
        run: |
          body="${{ github.event.issue.body }}"
          source_url=$(echo "$body" | awk -v RS='### Link to Original Source' 'END{print}' | xargs)
          echo "source_url=$source_url" >> $GITHUB_OUTPUT

      - name: "Create Pull Request"
        id: create_pr
        uses: peter-evans/create-pull-request@v7
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "feat(hunt): New hunt draft from issue #${{ github.event.issue.number }}"
          committer: "hearthbot <hearthbot@users.noreply.github.com>"
          author: "${{ github.event.issue.user.login }} <${{ github.event.issue.user.login }}@users.noreply.github.com>"
          branch: "hearth/issue-${{ github.event.issue.number }}"
          delete-branch: true
          title: "🔥 Hunt Draft from Issue #${{ github.event.issue.number }}"
          body: |
            This PR was automatically generated from CTI provided in issue #${{ github.event.issue.number }}.
            - **Submitter**: @${{ github.event.issue.user.login }}
            - **Source Issue**: #${{ github.event.issue.number }}
            - **Source CTI Link**: ${{ steps.parse_issue.outputs.source_url }}
            Please review the generated hunt below.
            Closes #${{ github.event.issue.number }}
          labels: "needs-review, automated-draft"
          assignees: "${{ github.event.issue.user.login }}"

      - name: "Comment on issue with PR link"
        if: steps.create_pr.outputs.pull-request-number
        uses: peter-evans/create-or-update-comment@v4
        with:
          issue-number: ${{ github.event.issue.number }}
          body: |
            📄 Your submission has been approved and a draft pull request has been created. Thank you!
            🔗 **View PR**: #${{ steps.create_pr.outputs.pull-request-number }} 